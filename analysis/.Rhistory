bin_post(ncounts = p1counts, ssize = p1size, prior = rep(1 / (ploidy + 1), ploidy + 1))
bin_post(ncounts = p2counts, ssize = p2size, prior = rep(1 / (ploidy + 1), ploidy + 1))
uout$p1geno
uout$p2geno
uout1$p1geno
uout1$p2geno
uout2 <- updog(ocounts = ocounts, osize = osize, ploidy = ploidy,
p1counts = p1counts, p1size = p1size,
p2counts = p2counts, p2size = p2size,
update_rho = TRUE, overdispersion = TRUE,
update_geno = TRUE, update_outlier = TRUE, update_pi = TRUE)
uout2 <- updog(ocounts = ocounts, osize = osize, ploidy = ploidy,
p1counts = p1counts, p1size = p1size,
p2counts = p2counts, p2size = p2size,
update_rho = TRUE, overdispersion = TRUE,
update_geno = TRUE, update_outlier = TRUE, update_pi = TRUE)
pl <- plot_geno(ocounts = ocounts, osize = osize, ploidy = ploidy, p1counts = p1counts, p1size = p1size,
p2counts = p2counts, p2size = p2size, col = uout$ogeno, theta = uout$prob_ok, seq_error = 0.01)
pl <- plot_geno(ocounts = ocounts, osize = osize, ploidy = ploidy, p1counts = p1counts, p1size = p1size,
p2counts = p2counts, p2size = p2size, col = uout$ogeno, theta = uout$prob_ok, seq_error = 0.01)
pl <- plot_geno(ocounts = ocounts, osize = osize, ploidy = ploidy, p1counts = p1counts, p1size = p1size,
p2counts = p2counts, p2size = p2size, col = uout2$ogeno, theta = uout2$prob_ok, seq_error = 0.01)
pl <- plot_geno(ocounts = ocounts, osize = osize, ploidy = ploidy, p1counts = p1counts, p1size = p1size,
p2counts = p2counts, p2size = p2size, col = uout1$ogeno, theta = uout1$prob_ok, seq_error = 0.01)
pl <- plot_geno(ocounts = ocounts, osize = osize, ploidy = ploidy, p1counts = p1counts, p1size = p1size,
p2counts = p2counts, p2size = p2size, col = uout2$ogeno, theta = uout2$prob_ok, seq_error = 0.01)
get_q_array(ploidy)[7, 4, 7]
sum(ocounts / osize > 0.99) / length(ocounts)
sum(ocounts / osize > 0.999) / length(ocounts)
uout_lessseq <- updog(ocounts = ocounts, osize = osize, ploidy = ploidy,
update_rho = TRUE, overdispersion = TRUE,
update_geno = TRUE, update_outlier = TRUE, update_pi = TRUE,
seq_error = 0.001)
pl <- plot_geno(ocounts = ocounts, osize = osize, ploidy = ploidy, p1counts = p1counts, p1size = p1size,
p2counts = p2counts, p2size = p2size, col = uout_lessseq$ogeno,
theta = uout_lessseq$prob_ok, seq_error = 0.001)
library(updog)
set.seed(702)
load("../data/subset_David.Rdata")
dat <- subset_david
lastp <- 12 ## number of final rows that are parents
cmat <- dat[[10]]
p1dat <- cmat[(nrow(cmat) - lastp + 1):(nrow(cmat) - lastp / 2), ]
p2dat <- cmat[(nrow(cmat) - lastp / 2 + 1):nrow(cmat), ]
odat  <- cmat[1:(nrow(cmat) - lastp), ]
p1counts <- p1dat[, 1]
p1size   <- rowSums(p1dat)
p2counts <- p2dat[, 1]
p2size   <- rowSums(p2dat)
ocounts  <- odat[, 1]
osize    <- rowSums(odat)
ploidy <- 6
library(updog)
set.seed(702)
cmat <- dat[[9]]
cmat <- dat[[9]]
p1dat <- cmat[(nrow(cmat) - lastp + 1):(nrow(cmat) - lastp / 2), ]
p2dat <- cmat[(nrow(cmat) - lastp / 2 + 1):nrow(cmat), ]
p2counts <- p2dat[, 1]
p2size   <- rowSums(p2dat)
ocounts  <- odat[, 1]
osize    <- rowSums(odat)
ploidy <- 6
uout1 <- updog(ocounts = ocounts, osize = osize, ploidy = ploidy,
update_rho = TRUE, overdispersion = TRUE,
update_geno = TRUE, update_outlier = TRUE, update_pi = TRUE,
seq_error = 0.001)
uout1 <- updog(ocounts = ocounts, osize = osize, ploidy = ploidy,
update_rho = TRUE, overdispersion = TRUE,
update_geno = TRUE, update_outlier = TRUE, update_pi = TRUE,
seq_error = 0.001)
pl <- plot_geno(ocounts = ocounts, osize = osize, ploidy = ploidy, p1counts = p1counts, p1size = p1size,
p2counts = p2counts, p2size = p2size, col = uout1$ogeno, theta = uout1$prob_ok, seq_error = 0.01)
uout1$p1geno
uout2$p1geno
uout1$p1geno
cmat <- dat[[8]]
p1dat <- cmat[(nrow(cmat) - lastp + 1):(nrow(cmat) - lastp / 2), ]
p2dat <- cmat[(nrow(cmat) - lastp / 2 + 1):nrow(cmat), ]
odat  <- cmat[1:(nrow(cmat) - lastp), ]
p1counts <- p1dat[, 1]
p1size   <- rowSums(p1dat)
p2counts <- p2dat[, 1]
p2size   <- rowSums(p2dat)
ocounts  <- odat[, 1]
osize    <- rowSums(odat)
ploidy <- 6
uout1 <- updog(ocounts = ocounts, osize = osize, ploidy = ploidy,
update_rho = TRUE, overdispersion = TRUE,
update_geno = TRUE, update_outlier = TRUE, update_pi = TRUE,
seq_error = 0.001)
uout1 <- updog(ocounts = ocounts, osize = osize, ploidy = ploidy,
update_rho = TRUE, overdispersion = TRUE,
update_geno = TRUE, update_outlier = TRUE, update_pi = TRUE,
seq_error = 0.001)
pl <- plot_geno(ocounts = ocounts, osize = osize, ploidy = ploidy, p1counts = p1counts, p1size = p1size,
p2counts = p2counts, p2size = p2size, col = uout1$ogeno, theta = uout1$prob_ok, seq_error = 0.01)
library(updog)
set.seed(702)
load("../data/subset_David.Rdata")
dat <- subset_david
lastp <- 12 ## number of final rows that are parents
index <- 1
cmat <- dat[[index]]
p1dat <- cmat[(nrow(cmat) - lastp + 1):(nrow(cmat) - lastp / 2), ]
p2dat <- cmat[(nrow(cmat) - lastp / 2 + 1):nrow(cmat), ]
odat  <- cmat[1:(nrow(cmat) - lastp), ]
p1counts <- p1dat[, 1]
p1size   <- rowSums(p1dat)
p2counts <- p2dat[, 1]
p2size   <- rowSums(p2dat)
ocounts  <- odat[, 1]
osize    <- rowSums(odat)
ploidy <- 6
uout1 <- updog(ocounts = ocounts, osize = osize, ploidy = ploidy,
update_rho = TRUE, overdispersion = TRUE,
update_geno = TRUE, update_outlier = TRUE, update_pi = TRUE,
seq_error = 0.001)
pl <- plot_geno(ocounts = ocounts, osize = osize, ploidy = ploidy, p1counts = p1counts, p1size = p1size,
p2counts = p2counts, p2size = p2size, col = uout1$ogeno, theta = uout1$prob_ok, seq_error = 0.001,
maxpostprob = apply(uout1$opostprob, 2, max))
detach("package:updog", unload=TRUE)
library(updog)
set.seed(702)
load("../data/subset_David.Rdata")
dat <- subset_david
lastp <- 12 ## number of final rows that are parents
pl <- plot_geno(ocounts = ocounts, osize = osize, ploidy = ploidy, p1counts = p1counts, p1size = p1size,
p2counts = p2counts, p2size = p2size, col = uout1$ogeno, theta = uout1$prob_ok, seq_error = 0.001,
maxpostprob = apply(uout1$opostprob, 2, max))
pl <- plot_geno(ocounts = ocounts, osize = osize, ploidy = ploidy, p1counts = p1counts, p1size = p1size,
p2counts = p2counts, p2size = p2size, col = uout1$ogeno, prob_ok = uout1$prob_ok, seq_error = 0.001,
maxpostprob = apply(uout1$opostprob, 2, max))
print(pl)
library(updog)
set.seed(702)
load("../data/subset_David.Rdata")
dat <- subset_david
lastp <- 12 ## number of final rows that are parents
for (index in 1:10) {
## Run `updog`
cmat <- dat[[index]]
p1dat <- cmat[(nrow(cmat) - lastp + 1):(nrow(cmat) - lastp / 2), ]
p2dat <- cmat[(nrow(cmat) - lastp / 2 + 1):nrow(cmat), ]
odat  <- cmat[1:(nrow(cmat) - lastp), ]
p1counts <- p1dat[, 1]
p1size   <- rowSums(p1dat)
p2counts <- p2dat[, 1]
p2size   <- rowSums(p2dat)
ocounts  <- odat[, 1]
osize    <- rowSums(odat)
ploidy <- 6
uout1 <- updog(ocounts = ocounts, osize = osize, ploidy = ploidy,
update_rho = TRUE, overdispersion = TRUE,
update_geno = TRUE, update_outlier = TRUE, update_pi = TRUE,
seq_error = 0.001)
pl <- plot_geno(ocounts = ocounts, osize = osize, ploidy = ploidy, p1counts = p1counts, p1size = p1size,
p2counts = p2counts, p2size = p2size, col = uout1$ogeno, prob_ok = uout1$prob_ok, seq_error = 0.001,
maxpostprob = apply(uout1$opostprob, 2, max))
print(pl)
}
index
cmat <- dat[[index]]
p1dat <- cmat[(nrow(cmat) - lastp + 1):(nrow(cmat) - lastp / 2), ]
p2dat <- cmat[(nrow(cmat) - lastp / 2 + 1):nrow(cmat), ]
odat  <- cmat[1:(nrow(cmat) - lastp), ]
p1counts <- p1dat[, 1]
p1size   <- rowSums(p1dat)
p2counts <- p2dat[, 1]
p2size   <- rowSums(p2dat)
ocounts  <- odat[, 1]
osize    <- rowSums(odat)
ploidy <- 6
uout1 <- updog(ocounts = ocounts, osize = osize, ploidy = ploidy,
update_rho = TRUE, overdispersion = TRUE,
update_geno = TRUE, update_outlier = TRUE, update_pi = TRUE,
seq_error = 0.001)
uout1 <- updog(ocounts = ocounts, osize = osize, ploidy = ploidy,
update_rho = TRUE, overdispersion = TRUE,
update_geno = TRUE, update_outlier = TRUE, update_pi = TRUE,
seq_error = 0.001)
pl <- plot_geno(ocounts = ocounts, osize = osize, ploidy = ploidy, p1counts = p1counts, p1size = p1size,
p2counts = p2counts, p2size = p2size, col = uout1$ogeno, prob_ok = uout1$prob_ok, seq_error = 0.001,
maxpostprob = apply(uout1$opostprob, 2, max))
print(pl)
index
detach("package:updog", unload=TRUE)
for (index in 1:10) {
## Run `updog`
cmat <- dat[[index]]
p1dat <- cmat[(nrow(cmat) - lastp + 1):(nrow(cmat) - lastp / 2), ]
p2dat <- cmat[(nrow(cmat) - lastp / 2 + 1):nrow(cmat), ]
odat  <- cmat[1:(nrow(cmat) - lastp), ]
p1counts <- p1dat[, 1]
p1size   <- rowSums(p1dat)
p2counts <- p2dat[, 1]
p2size   <- rowSums(p2dat)
ocounts  <- odat[, 1]
osize    <- rowSums(odat)
ploidy <- 6
uout1 <- updog(ocounts = ocounts, osize = osize, ploidy = ploidy,
update_rho = TRUE, overdispersion = TRUE,
update_geno = TRUE, update_outlier = TRUE, update_pi = TRUE,
seq_error = 0.001)
pl <- plot_geno(ocounts = ocounts, osize = osize, ploidy = ploidy, p1counts = p1counts, p1size = p1size,
p2counts = p2counts, p2size = p2size, col = uout1$ogeno, prob_ok = uout1$prob_ok, seq_error = 0.001,
maxpostprob = apply(uout1$opostprob, 2, max))
print(pl)
}
library(updog)
set.seed(702)
load("../data/subset_David.Rdata")
dat <- subset_david
lastp <- 12 ## number of final rows that are parents
for (index in 1:10) {
## Run `updog`
cmat <- dat[[index]]
p1dat <- cmat[(nrow(cmat) - lastp + 1):(nrow(cmat) - lastp / 2), ]
p2dat <- cmat[(nrow(cmat) - lastp / 2 + 1):nrow(cmat), ]
odat  <- cmat[1:(nrow(cmat) - lastp), ]
p1counts <- p1dat[, 1]
p1size   <- rowSums(p1dat)
p2counts <- p2dat[, 1]
p2size   <- rowSums(p2dat)
ocounts  <- odat[, 1]
osize    <- rowSums(odat)
ploidy <- 6
uout1 <- updog(ocounts = ocounts, osize = osize, ploidy = ploidy,
update_rho = TRUE, overdispersion = TRUE,
update_geno = TRUE, update_outlier = TRUE, update_pi = TRUE,
seq_error = 0.001)
pl <- plot_geno(ocounts = ocounts, osize = osize, ploidy = ploidy, p1counts = p1counts, p1size = p1size,
p2counts = p2counts, p2size = p2size, col = uout1$ogeno, prob_ok = uout1$prob_ok, seq_error = 0.001,
maxpostprob = apply(uout1$opostprob, 2, max))
print(pl)
}
iterindex
index
cmat <- dat[[index]]
p1dat <- cmat[(nrow(cmat) - lastp + 1):(nrow(cmat) - lastp / 2), ]
p2dat <- cmat[(nrow(cmat) - lastp / 2 + 1):nrow(cmat), ]
odat  <- cmat[1:(nrow(cmat) - lastp), ]
p1counts <- p1dat[, 1]
p1size   <- rowSums(p1dat)
p2counts <- p2dat[, 1]
p2size   <- rowSums(p2dat)
ocounts  <- odat[, 1]
osize    <- rowSums(odat)
ploidy <- 6
uout1 <- updog(ocounts = ocounts, osize = osize, ploidy = ploidy,
update_rho = TRUE, overdispersion = TRUE,
update_geno = TRUE, update_outlier = TRUE, update_pi = TRUE,
seq_error = 0.001)
detach("package:updog", unload=TRUE)
devtools::load_all("../../updog/")
uout1 <- updog(ocounts = ocounts, osize = osize, ploidy = ploidy,
update_rho = TRUE, overdispersion = TRUE,
update_geno = TRUE, update_outlier = TRUE, update_pi = TRUE,
seq_error = 0.001)
devtools::load_all("../../updog/")
devtools::load_all("../../updog/")
uout1 <- updog(ocounts = ocounts, osize = osize, ploidy = ploidy,
update_rho = TRUE, overdispersion = TRUE,
update_geno = TRUE, update_outlier = TRUE, update_pi = TRUE,
seq_error = 0.001)
objnew
objold
objnew
objold
objnew
objold
objnew
objold
pival
theta
fout$theta
mean(fout$theta)
pival
p1geno
p2geno
out_mu
out_rho
rho
pk
devtools::load_all()
devtools::load_all("../../updog/")
uout1 <- updog(ocounts = ocounts, osize = osize, ploidy = ploidy,
update_rho = TRUE, overdispersion = TRUE,
update_geno = TRUE, update_outlier = TRUE, update_pi = TRUE,
seq_error = 0.001)
devtools::load_all("../../updog/")
uout1 <- updog(ocounts = ocounts, osize = osize, ploidy = ploidy,
update_rho = TRUE, overdispersion = TRUE,
update_geno = TRUE, update_outlier = TRUE, update_pi = TRUE,
seq_error = 0.001)
objold
pivalold <- pival
rhoold <- rho
out_muold <- out_mu
out_rhoold <- out_rho
p1geno_old <- p1geno
p2geno_old <- p2geno
pival   <- fout$pival
rho     <- fout$rho
out_mu  <- fout$out_mu
out_rho <- fout$out_rho
p1geno  <- fout$p1geno
p2geno  <- fout$p2geno
objnew <- up_bb_obj(pival = pival, p1geno = p1geno, p2geno = p2geno,
rho = rho, out_mu = out_mu, out_rho = out_rho,
ocounts = ocounts, osize = osize, qarray = qarray,
r1vec = r1vec, r2vec = r2vec, pk = pk)
objnew
objold
pivalold
pival
rhoold
rho
rho <- rhoold
objnew <- up_bb_obj(pival = pival, p1geno = p1geno, p2geno = p2geno,
rho = rho, out_mu = out_mu, out_rho = out_rho,
ocounts = ocounts, osize = osize, qarray = qarray,
r1vec = r1vec, r2vec = r2vec, pk = pk)
objnew
objold
out_mu
out_muold
out_rho
out_rhoold
p1geno
p2geno
p1geno_old
p2geno_old
?optim
r1vec
r2vec
index <- 5
cmat <- dat[[index]]
p1dat <- cmat[(nrow(cmat) - lastp + 1):(nrow(cmat) - lastp / 2), ]
p2dat <- cmat[(nrow(cmat) - lastp / 2 + 1):nrow(cmat), ]
odat  <- cmat[1:(nrow(cmat) - lastp), ]
p1counts <- p1dat[, 1]
p1size   <- rowSums(p1dat)
p2counts <- p2dat[, 1]
p2size   <- rowSums(p2dat)
ocounts  <- odat[, 1]
osize    <- rowSums(odat)
ploidy <- 6
library(updog)
set.seed(702)
load("../data/subset_David.Rdata")
dat <- subset_david
lastp <- 12 ## number of final rows that are parents
set.seed(345)
load("../data/subset_David.Rdata")
lastp <- 12 ## number of final rows that are parents
for (index in 1:10) {
## Run `updog`
cmat <- dat[[index]]
p1dat <- cmat[(nrow(cmat) - lastp + 1):(nrow(cmat) - lastp / 2), ]
p2dat <- cmat[(nrow(cmat) - lastp / 2 + 1):nrow(cmat), ]
odat  <- cmat[1:(nrow(cmat) - lastp), ]
p1counts <- p1dat[, 1]
p1size   <- rowSums(p1dat)
p2counts <- p2dat[, 1]
p2size   <- rowSums(p2dat)
ocounts  <- odat[, 1]
osize    <- rowSums(odat)
ploidy <- 6
uout1 <- updog(ocounts = ocounts, osize = osize, ploidy = ploidy,
update_rho = TRUE, overdispersion = TRUE,
update_geno = TRUE, update_outlier = TRUE, update_pi = TRUE,
seq_error = 0.001)
pl <- plot_geno(ocounts = ocounts, osize = osize, ploidy = ploidy, p1counts = p1counts, p1size = p1size,
p2counts = p2counts, p2size = p2size, col = uout1$ogeno, prob_ok = uout1$prob_ok, seq_error = 0.001,
maxpostprob = apply(uout1$opostprob, 2, max))
print(pl)
}
index <- 5
cmat <- dat[[index]]
p2dat <- cmat[(nrow(cmat) - lastp / 2 + 1):nrow(cmat), ]
odat  <- cmat[1:(nrow(cmat) - lastp), ]
p1counts <- p1dat[, 1]
p1size   <- rowSums(p1dat)
p2counts <- p2dat[, 1]
p2size   <- rowSums(p2dat)
ocounts  <- odat[, 1]
osize    <- rowSums(odat)
ploidy <- 6
uout1 <- updog(ocounts = ocounts, osize = osize, ploidy = ploidy,
update_rho = TRUE, overdispersion = TRUE,
update_geno = TRUE, update_outlier = TRUE, update_pi = TRUE,
seq_error = 0.001)
uout1 <- updog(ocounts = ocounts, osize = osize, ploidy = ploidy,
update_rho = TRUE, overdispersion = TRUE,
update_geno = TRUE, update_outlier = FALSE, update_pi = TRUE,
seq_error = 0.001)
pl <- plot_geno(ocounts = ocounts, osize = osize, ploidy = ploidy, p1counts = p1counts, p1size = p1size,
p2counts = p2counts, p2size = p2size, col = uout1$ogeno, prob_ok = uout1$prob_ok, seq_error = 0.001,
maxpostprob = apply(uout1$opostprob, 2, max))
print(pl)
for (index in 1:10) {
## Run `updog`
cmat <- dat[[index]]
p1dat <- cmat[(nrow(cmat) - lastp + 1):(nrow(cmat) - lastp / 2), ]
p2dat <- cmat[(nrow(cmat) - lastp / 2 + 1):nrow(cmat), ]
odat  <- cmat[1:(nrow(cmat) - lastp), ]
p1counts <- p1dat[, 1]
p1size   <- rowSums(p1dat)
p2counts <- p2dat[, 1]
p2size   <- rowSums(p2dat)
ocounts  <- odat[, 1]
osize    <- rowSums(odat)
ploidy <- 6
update_outlier <- TRUE
if (index == 5) {
update_outlier <- FALSE
}
uout1 <- updog(ocounts = ocounts, osize = osize, ploidy = ploidy,
update_rho = TRUE, overdispersion = TRUE,
update_geno = TRUE, update_outlier = update_outlier,
update_pi = TRUE, seq_error = 0.001)
pl <- plot_geno(ocounts = ocounts, osize = osize, ploidy = ploidy, p1counts = p1counts, p1size = p1size,
p2counts = p2counts, p2size = p2size, col = uout1$ogeno, prob_ok = uout1$prob_ok, seq_error = 0.001,
maxpostprob = apply(uout1$opostprob, 2, max))
print(pl)
}
index
index <- 8
cmat <- dat[[index]]
p1dat <- cmat[(nrow(cmat) - lastp + 1):(nrow(cmat) - lastp / 2), ]
p2dat <- cmat[(nrow(cmat) - lastp / 2 + 1):nrow(cmat), ]
odat  <- cmat[1:(nrow(cmat) - lastp), ]
p1counts <- p1dat[, 1]
p1size   <- rowSums(p1dat)
p2counts <- p2dat[, 1]
p2size   <- rowSums(p2dat)
ocounts  <- odat[, 1]
osize    <- rowSums(odat)
ploidy <- 6
update_outlier <- TRUE
uout1 <- updog(ocounts = ocounts, osize = osize, ploidy = ploidy,
update_rho = TRUE, overdispersion = TRUE,
update_geno = TRUE, update_outlier = update_outlier,
update_pi = TRUE, seq_error = 0.001)
uout1 <- updog(ocounts = ocounts, osize = osize, ploidy = ploidy,
update_rho = TRUE, overdispersion = TRUE,
update_geno = TRUE, update_outlier = update_outlier,
update_pi = TRUE, seq_error = 0.001)
pl <- plot_geno(ocounts = ocounts, osize = osize, ploidy = ploidy, p1counts = p1counts, p1size = p1size,
p2counts = p2counts, p2size = p2size, col = uout1$ogeno, prob_ok = uout1$prob_ok, seq_error = 0.001,
maxpostprob = apply(uout1$opostprob, 2, max))
print(pl)
index <- 9
cmat <- dat[[index]]
p2dat <- cmat[(nrow(cmat) - lastp / 2 + 1):nrow(cmat), ]
odat  <- cmat[1:(nrow(cmat) - lastp), ]
p1counts <- p1dat[, 1]
p1size   <- rowSums(p1dat)
p2counts <- p2dat[, 1]
p2size   <- rowSums(p2dat)
ocounts  <- odat[, 1]
osize    <- rowSums(odat)
ploidy <- 6
update_outlier <- TRUE
if (index %in% c(5, 7)) {
update_outlier <- FALSE
}
uout1 <- updog(ocounts = ocounts, osize = osize, ploidy = ploidy,
update_rho = TRUE, overdispersion = TRUE,
update_geno = TRUE, update_outlier = update_outlier,
update_pi = TRUE, seq_error = 0.001)
uout1 <- updog(ocounts = ocounts, osize = osize, ploidy = ploidy,
update_rho = TRUE, overdispersion = TRUE,
update_geno = TRUE, update_outlier = update_outlier,
update_pi = TRUE, seq_error = 0.001)
pl <- plot_geno(ocounts = ocounts, osize = osize, ploidy = ploidy, p1counts = p1counts, p1size = p1size,
p2counts = p2counts, p2size = p2size, col = uout1$ogeno, prob_ok = uout1$prob_ok, seq_error = 0.001,
maxpostprob = apply(uout1$opostprob, 2, max))
print(pl)
index
index <- 10
cmat <- dat[[index]]
p1dat <- cmat[(nrow(cmat) - lastp + 1):(nrow(cmat) - lastp / 2), ]
p2dat <- cmat[(nrow(cmat) - lastp / 2 + 1):nrow(cmat), ]
odat  <- cmat[1:(nrow(cmat) - lastp), ]
p1counts <- p1dat[, 1]
p1size   <- rowSums(p1dat)
p2counts <- p2dat[, 1]
p2size   <- rowSums(p2dat)
ocounts  <- odat[, 1]
osize    <- rowSums(odat)
ploidy <- 6
update_outlier <- TRUE
if (index %in% c(5, 7)) {
update_outlier <- FALSE
}
uout1 <- updog(ocounts = ocounts, osize = osize, ploidy = ploidy,
update_rho = TRUE, overdispersion = TRUE,
update_geno = TRUE, update_outlier = update_outlier,
update_pi = TRUE, seq_error = 0.001)
uout1 <- updog(ocounts = ocounts, osize = osize, ploidy = ploidy,
update_rho = TRUE, overdispersion = TRUE,
update_geno = TRUE, update_outlier = update_outlier,
update_pi = TRUE, seq_error = 0.001)
pl <- plot_geno(ocounts = ocounts, osize = osize, ploidy = ploidy, p1counts = p1counts, p1size = p1size,
p2counts = p2counts, p2size = p2size, col = uout1$ogeno, prob_ok = uout1$prob_ok, seq_error = 0.001,
maxpostprob = apply(uout1$opostprob, 2, max))
print(pl)
pl <- plot_geno(ocounts = ocounts, osize = osize, ploidy = ploidy, p1counts = p1counts, p1size = p1size,
p2counts = p2counts, p2size = p2size, seq_error = 0.001)
print(pl)
