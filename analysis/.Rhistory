xlab = "Method", ylab = expression(hat(pi)[0]),
main = paste0("Est of pi0 when n = ", Nsamp * 2,", pi0 = ", nullpi,
", log2foldsd = ", log2foldsd))
p + theme(axis.text.x = element_text(angle = 90, hjust = 1, vjust = 0.3)) +
geom_hline(yintercept = nullpi, color = "red", lty = 2, lwd = 1)
auc_dat <- melt(auc_final, id.vars = NULL)
auc_plot <- qplot(x = variable, y = value, data = auc_dat, geom = "boxplot",
fill = I("skyblue"), xlab = "Method", ylab = "AUC",
main = paste0("AUC when n = ", Nsamp * 2,", pi0 = ", nullpi,
", log2foldsd = ", log2foldsd)) +
geom_hline(yintercept = max(apply(auc_mat, 2, median, na.rm = TRUE)),
color = "red", lty = 2, lwd = 1) +
theme(axis.text.x = element_text(angle = 90, hjust = 1, vjust = 0.3))
pi0_plot <- p + theme(axis.text.x = element_text(angle = 90, hjust = 1, vjust = 0.3)) +
geom_hline(yintercept = nullpi, color = "red", lty = 2, lwd = 1)
auc_dat <- melt(auc_final, id.vars = NULL)
auc_plot <- qplot(x = variable, y = value, data = auc_dat, geom = "boxplot",
fill = I("skyblue"), xlab = "Method", ylab = "AUC",
main = paste0("AUC when n = ", Nsamp * 2,", pi0 = ", nullpi,
", log2foldsd = ", log2foldsd)) +
geom_hline(yintercept = max(apply(auc_mat, 2, median, na.rm = TRUE)),
color = "red", lty = 2, lwd = 1) +
theme(axis.text.x = element_text(angle = 90, hjust = 1, vjust = 0.3))
print(pi0_plot)
print(auc_plot)
auc_plot <- qplot(x = variable, y = value, data = auc_dat, geom = "boxplot",
fill = I("skyblue"), xlab = "Method", ylab = "AUC",
main = paste0("AUC when n = ", Nsamp * 2,", pi0 = ", nullpi,
", log2foldsd = ", log2foldsd)) +
geom_hline(yintercept = max(apply(auc_final, 2, median, na.rm = TRUE)),
color = "red", lty = 2, lwd = 1) +
theme(axis.text.x = element_text(angle = 90, hjust = 1, vjust = 0.3))
print(pi0_plot)
print(auc_plot)
pi0_mat <- read.csv("../output/pi0_true_grid.csv")
data_path <- "~/Data/big_sims_cate_out/"
col_index <- 0
for(Nsamp_index in 1:length(Nsamp_seq)) {
Nsamp <- Nsamp_seq[Nsamp_index]
for(nullpi_index in 1:length(nullpi_seq)) {
nullpi <- nullpi_seq[nullpi_index]
for(log2foldsd_index in 1:length(log2foldsd_seq)) {
col_index <- col_index + 1
log2foldsd <- log2foldsd_seq[log2foldsd_index]
pi0_name <- paste0(data_path, "pi0_nsamp", Nsamp,"_nullpi",
nullpi * 100,
"_log2foldsd", log2foldsd, ".csv")
pi0_mat_cate <- read.csv(file = pi0_name)[, -c(1:3, 7:9)]
pi0_final <- cbind(pi0_mat_cate, pi0_mat[, col_index])
pi0_dat <- melt(pi0_final, id.vars = NULL)
p <- qplot(y = value, x = variable, data = pi0_dat, geom = "boxplot", fill = I("skyblue"),
xlab = "Method", ylab = expression(hat(pi)[0]),
main = paste0("Est of pi0 when n = ", Nsamp * 2,", pi0 = ", nullpi,
", log2foldsd = ", log2foldsd))
pi0_plot <- p + theme(axis.text.x = element_text(angle = 90, hjust = 1, vjust = 0.3)) +
geom_hline(yintercept = nullpi, color = "red", lty = 2, lwd = 1)
print(auc_plot)
}
}
}
load("../data/subset_David.Rdata")
ls()
subset_david
head(subset_david)
dim(subset_david)
str(subset_david)
subset_david[[1]]
dat <- subset_david
str(dat)
head(dat[[1]])
lastp
lastp <- 12 ## number of final rows that are parents
lastp
dat[(nrow(dat) - 12):nrow(dat)]
dat[(nrow(dat) - 12):nrow(dat), ]
cmat <- dat[[1]]
cmat[(nrow(cmat) - 12):nrow(cmat), ]
cmat[(nrow(cmat) - 11):nrow(cmat), ]
cmat[(nrow(cmat) - lastp + 1):nrow(cmat), ]
cmat[(nrow(cmat) - lastp + 1):(nrow(cmat) - 6), ]
cmat[(nrow(cmat) - lastp + 1):(nrow(cmat) - lastp / 2), ]
p2dat <- cmat[(nrow(cmat) - lastp / 2 + 1):nrow(cmat), ]
odat  <- cmat[1:(nrow(cmat) - lastp), ]
odat
```{r}
load("../data/subset_David.Rdata")
dat <- subset_david
lastp <- 12 ## number of final rows that are parents
cmat  <- dat[[1]]
p1dat <- cmat[(nrow(cmat) - lastp + 1):(nrow(cmat) - lastp / 2), ]
p2dat <- cmat[(nrow(cmat) - lastp / 2 + 1):nrow(cmat), ]
odat  <- cmat[1:(nrow(cmat) - lastp), ]
library(updog)
plot_geno(ocounts = odat[, 1], osize = odat[, 2])
odat[, 1]
odat[, 2]
plot(odat[,1])
plot(odat[,1], odat[,2])
plot_geno(ocounts = odat[, 1], osize = odat[, 2] + odat[, 1])
plot_geno(ocounts = odat[, 1], osize = odat[, 2] + odat[, 1], ploidy = 6)
plot_geno(ocounts = odat[, 1], osize = odat[, 2] + odat[, 1], ploidy = 6,
p1counts = p1dat[, 1], p1size = p1dat[, 1] + p1dat[, 2])
plot_geno(ocounts = odat[, 1], osize = odat[, 2] + odat[, 1], ploidy = 6,
p1counts = p1dat[, 1], p1size = p1dat[, 1] + p1dat[, 2],
p2counts = p2dat[, 1], p2size = p2dat[, 1] + p2dat[, 2])
cmat  <- dat[[2]]
p1dat <- cmat[(nrow(cmat) - lastp + 1):(nrow(cmat) - lastp / 2), ]
p2dat <- cmat[(nrow(cmat) - lastp / 2 + 1):nrow(cmat), ]
odat  <- cmat[1:(nrow(cmat) - lastp), ]
plot_geno(ocounts = odat[, 1], osize = odat[, 2] + odat[, 1], ploidy = 6,
p1counts = p1dat[, 1], p1size = p1dat[, 1] + p1dat[, 2],
p2counts = p2dat[, 1], p2size = p2dat[, 1] + p2dat[, 2])
cmat  <- dat[[3]]
p1dat <- cmat[(nrow(cmat) - lastp + 1):(nrow(cmat) - lastp / 2), ]
p2dat <- cmat[(nrow(cmat) - lastp / 2 + 1):nrow(cmat), ]
odat  <- cmat[1:(nrow(cmat) - lastp), ]
plot_geno(ocounts = odat[, 1], osize = odat[, 2] + odat[, 1], ploidy = 6,
p1counts = p1dat[, 1], p1size = p1dat[, 1] + p1dat[, 2],
p2counts = p2dat[, 1], p2size = p2dat[, 1] + p2dat[, 2])
cmat  <- dat[[4]]
p1dat <- cmat[(nrow(cmat) - lastp + 1):(nrow(cmat) - lastp / 2), ]
odat  <- cmat[1:(nrow(cmat) - lastp), ]
plot_geno(ocounts = odat[, 1], osize = odat[, 2] + odat[, 1], ploidy = 6,
p1counts = p1dat[, 1], p1size = p1dat[, 1] + p1dat[, 2],
p2counts = p2dat[, 1], p2size = p2dat[, 1] + p2dat[, 2])
cmat  <- dat[[5]]
p2dat <- cmat[(nrow(cmat) - lastp / 2 + 1):nrow(cmat), ]
plot_geno(ocounts = odat[, 1], osize = odat[, 2] + odat[, 1], ploidy = 6,
p1counts = p1dat[, 1], p1size = p1dat[, 1] + p1dat[, 2],
p2counts = p2dat[, 1], p2size = p2dat[, 1] + p2dat[, 2])
cmat  <- dat[[6]]
p1dat <- cmat[(nrow(cmat) - lastp + 1):(nrow(cmat) - lastp / 2), ]
odat  <- cmat[1:(nrow(cmat) - lastp), ]
plot_geno(ocounts = odat[, 1], osize = odat[, 2] + odat[, 1], ploidy = 6,
p1counts = p1dat[, 1], p1size = p1dat[, 1] + p1dat[, 2],
p2counts = p2dat[, 1], p2size = p2dat[, 1] + p2dat[, 2])
cmat  <- dat[[7]]
p1dat <- cmat[(nrow(cmat) - lastp + 1):(nrow(cmat) - lastp / 2), ]
odat  <- cmat[1:(nrow(cmat) - lastp), ]
plot_geno(ocounts = odat[, 1], osize = odat[, 2] + odat[, 1], ploidy = 6,
p1counts = p1dat[, 1], p1size = p1dat[, 1] + p1dat[, 2],
p2counts = p2dat[, 1], p2size = p2dat[, 1] + p2dat[, 2])
cmat  <- dat[[7]]
p1dat <- cmat[(nrow(cmat) - lastp + 1):(nrow(cmat) - lastp / 2), ]
odat  <- cmat[1:(nrow(cmat) - lastp), ]
pl <- plot_geno(ocounts = odat[, 1], osize = odat[, 2] + odat[, 1], ploidy = 6,
p1counts = p1dat[, 1], p1size = p1dat[, 1] + p1dat[, 2],
p2counts = p2dat[, 1], p2size = p2dat[, 1] + p2dat[, 2])
for(index in 1:length(dat)) {
cmat  <- dat[[7]]
p1dat <- cmat[(nrow(cmat) - lastp + 1):(nrow(cmat) - lastp / 2), ]
p2dat <- cmat[(nrow(cmat) - lastp / 2 + 1):nrow(cmat), ]
odat  <- cmat[1:(nrow(cmat) - lastp), ]
pl <- plot_geno(ocounts = odat[, 1], osize = odat[, 2] + odat[, 1], ploidy = 6,
p1counts = p1dat[, 1], p1size = p1dat[, 1] + p1dat[, 2],
p2counts = p2dat[, 1], p2size = p2dat[, 1] + p2dat[, 2])
}
for(index in 1:length(dat)) {
cmat  <- dat[[7]]
p1dat <- cmat[(nrow(cmat) - lastp + 1):(nrow(cmat) - lastp / 2), ]
p2dat <- cmat[(nrow(cmat) - lastp / 2 + 1):nrow(cmat), ]
odat  <- cmat[1:(nrow(cmat) - lastp), ]
plot_geno(ocounts = odat[, 1], osize = odat[, 2] + odat[, 1], ploidy = 6,
p1counts = p1dat[, 1], p1size = p1dat[, 1] + p1dat[, 2],
p2counts = p2dat[, 1], p2size = p2dat[, 1] + p2dat[, 2])
}
for(index in 1:length(dat)) {
cmat  <- dat[[index]]
p1dat <- cmat[(nrow(cmat) - lastp + 1):(nrow(cmat) - lastp / 2), ]
p2dat <- cmat[(nrow(cmat) - lastp / 2 + 1):nrow(cmat), ]
odat  <- cmat[1:(nrow(cmat) - lastp), ]
plot_geno(ocounts = odat[, 1], osize = odat[, 2] + odat[, 1], ploidy = 6,
p1counts = p1dat[, 1], p1size = p1dat[, 1] + p1dat[, 2],
p2counts = p2dat[, 1], p2size = p2dat[, 1] + p2dat[, 2])
}
cmat <- dat[[10]]
cmat[, 1] / (cmat[, 1] + cmat[, 2])
sort(cmat[, 1] / (cmat[, 1] + cmat[, 2]))
sort(cmat[, 1] / (cmat[, 1] + cmat[, 2]))[1:5]
cmat <- dat[[8]]
sort(cmat[, 1] / (cmat[, 1] + cmat[, 2]))[1:5]
cmat <- dat[[9]]
sort(cmat[, 1] / (cmat[, 1] + cmat[, 2]))[1:5]
cmat <- dat[[10]]
sort(cmat[, 1] / (cmat[, 1] + cmat[, 2]))[1:5]
lapply(dat, nrow)
cmat <- dat[[10]]
cmat <- dat[[10]]
p1dat <- cmat[(nrow(cmat) - lastp + 1):(nrow(cmat) - lastp / 2), ]
p2dat <- cmat[(nrow(cmat) - lastp / 2 + 1):nrow(cmat), ]
odat  <- cmat[1:(nrow(cmat) - lastp), ]
uout <- updog(ocounts = odat[, 1], osize = rowSums(odat), ploidy = 6,
p1counts = p1dat[, 1], p1size = rowSums(p1dat),
p2counts = p2dat[, 1], p2size = rowSums(p2dat))
uout
uout$p1postprob
uout$p2postprob
uout2 <- updog(ocounts = odat[, 1], osize = rowSums(odat), ploidy = 6,
p1counts = p1dat[, 1], p1size = rowSums(p1dat),
p2counts = p2dat[, 1], p2size = rowSums(p2dat),
do_mcmc = TRUE)
uout2 <- updog(ocounts = odat[, 1], osize = rowSums(odat), ploidy = 6,
do_mcmc = TRUE)
uout2$m_p1postprob
uout2$m_p2postprob
uout$p1postprob
uout$p2postprob
uout2$m_p1postprob
uout2$m_ppostprob
uout2$m_opostprob
uout$p1postprob
uout2$m_p1postprob
uout2$m_p2postprob
uout$p1postprob
uout$p2postprob
names(uout)
uout2$m_p1postprob
uout2$m_p2postprob
uout2 <- updog(ocounts = odat[, 1], osize = rowSums(odat), ploidy = 6,
p1counts = p1dat[, 1], p1size = rowSums(p1dat),
p2counts = p2dat[, 1], p2size = rowSums(p2dat),
do_mcmc = TRUE)
uout2$m_p1postprob
uout2$m_p2postprob
uout$p1postprob
uout$p2postprob
uout2$m_p1postprob
uout2$m_p2postprob
uout$opostprob
uout2$opostprob
order(cmat[, 1]/ rowSums(cmat))
corder <- order(cmat[, 1]/ rowSums(cmat))
uout$p1postprob
uout$p2postprob
uout2$m_p1postprob
uout2$m_p2postprob
uout$opostprob[, corder[1:5]]
dim(uout$opostprob)
dim(uout2$m_opostprob)
corder[1:5]
corder <- order(cmat[1:(nrow(cmat) - 12), 1]/ rowSums(cmat[1:(nrow(cmat) - 12)]))
corder <- order(cmat[1:(nrow(cmat) - 12), 1]/ rowSums(cmat[1:(nrow(cmat) - 12),]))
uout$p1postprob
uout$p2postprob
uout2$m_p1postprob
uout2$m_p2postprob
uout$opostprob[, corder[1:5]]
?order
uout2$opostprob[, corder[1:5]]
uout2$m_opostprob[, corder[1:5]]
uout$opostprob[, corder[1:5]]
uout2$m_opostprob[, corder[1:5]]
uout$opostprob[, corder[1:5]]
aprobs <- cmat[1:(nrow(cmat) - 12), 1]/ rowSums(cmat[1:(nrow(cmat) - 12),])
corder <- order(aprobs)
uout$p1postprob
uout$p2postprob
uout2$m_p1postprob
uout2$m_p2postprob
uout$opostprob[, corder[1:5]]
uout2$m_opostprob[, corder[1:5]]
aprobs[corder[1:5]]
uout$opostprob[, corder[1:5]]
uout2$m_opostprob[, corder[1:5]]
aprobs[corder[1:5]]
aprobs[corder[1:4]]
uout$opostprob[, corder[1:4]]
uout2$m_opostprob[, corder[1:4]]
pmax(uout$opostprob)
apply(uout$opostprob, 2, which.max)
labelvec <- apply(uout$opostprob, 2, which.max)
plot_geno(ocounts = odat[, 1], osize = rowSums(odat[, 1], ploidy = 6, col = labelvec))
devtools::load_all()
library(updog)
load("../data/subset_David.Rdata")
dat <- subset_david
lastp <- 12 ## number of final rows that are parents
for(index in 1:length(dat)) {
cmat  <- dat[[index]]
p1dat <- cmat[(nrow(cmat) - lastp + 1):(nrow(cmat) - lastp / 2), ]
p2dat <- cmat[(nrow(cmat) - lastp / 2 + 1):nrow(cmat), ]
odat  <- cmat[1:(nrow(cmat) - lastp), ]
plot_geno(ocounts = odat[, 1], osize = odat[, 2] + odat[, 1], ploidy = 6,
p1counts = p1dat[, 1], p1size = p1dat[, 1] + p1dat[, 2],
p2counts = p2dat[, 1], p2size = p2dat[, 1] + p2dat[, 2])
}
cmat <- dat[[8]]
sort(cmat[, 1] / (cmat[, 1] + cmat[, 2]))[1:4]
sort(cmat[, 1] / (cmat[, 1] + cmat[, 2]))[1:4]
cmat <- dat[[10]]
sort(cmat[, 1] / (cmat[, 1] + cmat[, 2]))[1:4]
cmat <- dat[[10]]
p1dat <- cmat[(nrow(cmat) - lastp + 1):(nrow(cmat) - lastp / 2), ]
p2dat <- cmat[(nrow(cmat) - lastp / 2 + 1):nrow(cmat), ]
odat  <- cmat[1:(nrow(cmat) - lastp), ]
uout <- updog(ocounts = odat[, 1], osize = rowSums(odat), ploidy = 6,
p1counts = p1dat[, 1], p1size = rowSums(p1dat),
p2counts = p2dat[, 1], p2size = rowSums(p2dat))
uout2 <- updog(ocounts = odat[, 1], osize = rowSums(odat), ploidy = 6,
p1counts = p1dat[, 1], p1size = rowSums(p1dat),
p2counts = p2dat[, 1], p2size = rowSums(p2dat),
do_mcmc = TRUE)
aprobs <- cmat[1:(nrow(cmat) - 12), 1]/ rowSums(cmat[1:(nrow(cmat) - 12),])
corder <- order(aprobs)
uout$p1postprob
uout$p2postprob
uout2$m_p1postprob
uout2$m_p2postprob
aprobs[corder[1:4]]
uout$opostprob[, corder[1:4]]
uout2$m_opostprob[, corder[1:4]]
labelvec <- apply(uout$opostprob, 2, which.max)
labelvec <- apply(uout$opostprob, 2, which.max)
plot_geno(ocounts = odat[, 1], osize = rowSums(odat),
p1counts = p1dat[, 1], p1size = rowSums(p1dat),
p1counts = p2dat[, 1], p2size = rowSums(p2dat),
ploidy = 6,
col = labelvec)
plot_geno(ocounts = odat[, 1], osize = rowSums(odat),
p1counts = p1dat[, 1], p1size = rowSums(p1dat),
p2counts = p2dat[, 1], p2size = rowSums(p2dat),
ploidy = 6,
col = labelvec)
labelvec <- apply(uout2$m_opostprob, 2, which.max)
labelvec <- apply(uout2$m_opostprob, 2, which.max)
plot_geno(ocounts = odat[, 1], osize = rowSums(odat),
p1counts = p1dat[, 1], p1size = rowSums(p1dat),
p2counts = p2dat[, 1], p2size = rowSums(p2dat),
ploidy = 6,
col = labelvec)
labelvec <- apply(uout2$m_opostprob, 2, which.max)
plot_geno(ocounts = odat[, 1], osize = rowSums(odat),
p1counts = p1dat[, 1], p1size = rowSums(p1dat),
p2counts = p2dat[, 1], p2size = rowSums(p2dat),
ploidy = 6,
col = labelvec)
uout3 <- updog(ocounts = odat[, 1], osize = rowSums(odat), ploidy = 6,
do_mcmc = TRUE)
labelvec <- apply(uout3$m_opostprob, 2, which.max)
plot_geno(ocounts = odat[, 1], osize = rowSums(odat),
p1counts = p1dat[, 1], p1size = rowSums(p1dat),
p2counts = p2dat[, 1], p2size = rowSums(p2dat),
ploidy = 6,
col = labelvec)
uout3$m_p1postprob
uout$p1postprob
uout3$m_p2postprob
uout$p2postprob
uout2$m_p1postprob
uout2$m_p2postprob
uout3$m_p2postprob
uout2$m_p2postprob
uout$p2postprob
round(uout$p1postprob, digits = 2)
round(uout$p2postprob, digits = 2)
cbind(uout3$m_p2postprob,
uout2$m_p2postprob,
round(uout$p2postprob, digits = 2))
cmat <- dat[[10]]
p1dat <- cmat[(nrow(cmat) - lastp + 1):(nrow(cmat) - lastp / 2), ]
p2dat <- cmat[(nrow(cmat) - lastp / 2 + 1):nrow(cmat), ]
odat  <- cmat[1:(nrow(cmat) - lastp), ]
uout <- updog(ocounts = odat[, 1], osize = rowSums(odat), ploidy = 6,
p1counts = p1dat[, 1], p1size = rowSums(p1dat),
p2counts = p2dat[, 1], p2size = rowSums(p2dat))
uout3 <- updog(ocounts = odat[, 1], osize = rowSums(odat), ploidy = 6,
do_mcmc = TRUE)
uout3 <- updog(ocounts = odat[, 1], osize = rowSums(odat), ploidy = 6,
do_mcmc = TRUE)
cbind(uout3$m_p1postprob,
uout2$m_p1postprob,
round(uout$p1postprob, digits = 2))
cbind(uout3$m_p2postprob,
uout2$m_p2postprob,
round(uout$p2postprob, digits = 2))
uout3 <- updog(ocounts = odat[, 1], osize = rowSums(odat), ploidy = 6,
do_mcmc = TRUE)
cbind(uout3$m_p1postprob,
uout2$m_p1postprob,
round(uout$p1postprob, digits = 2))
cbind(uout3$m_p2postprob,
uout2$m_p2postprob,
round(uout$p2postprob, digits = 2))
uout3 <- updog(ocounts = odat[, 1], osize = rowSums(odat), ploidy = 6,
do_mcmc = TRUE)
uout3 <- updog(ocounts = odat[, 1], osize = rowSums(odat), ploidy = 6,
do_mcmc = TRUE)
uout3 <- updog(ocounts = odat[, 1], osize = rowSums(odat), ploidy = 6,
do_mcmc = TRUE)
cbind(uout3$m_p1postprob,
uout2$m_p1postprob,
round(uout$p1postprob, digits = 2))
cbind(uout3$m_p2postprob,
uout2$m_p2postprob,
round(uout$p2postprob, digits = 2))
library(updog)
set.seed(3452)
load("../data/subset_David.Rdata")
lastp <- 12 ## number of final rows that are parents
for(index in 1:length(dat)) {
cmat  <- dat[[index]]
p1dat <- cmat[(nrow(cmat) - lastp + 1):(nrow(cmat) - lastp / 2), ]
p2dat <- cmat[(nrow(cmat) - lastp / 2 + 1):nrow(cmat), ]
odat  <- cmat[1:(nrow(cmat) - lastp), ]
plot_geno(ocounts = odat[, 1], osize = odat[, 2] + odat[, 1], ploidy = 6,
p1counts = p1dat[, 1], p1size = p1dat[, 1] + p1dat[, 2],
p2counts = p2dat[, 1], p2size = p2dat[, 1] + p2dat[, 2])
}
cmat <- dat[[8]]
sort(cmat[, 1] / (cmat[, 1] + cmat[, 2]))[1:4]
sort(cmat[, 1] / (cmat[, 1] + cmat[, 2]))[1:4]
cmat <- dat[[10]]
sort(cmat[, 1] / (cmat[, 1] + cmat[, 2]))[1:4]
cmat <- dat[[10]]
p1dat <- cmat[(nrow(cmat) - lastp + 1):(nrow(cmat) - lastp / 2), ]
p2dat <- cmat[(nrow(cmat) - lastp / 2 + 1):nrow(cmat), ]
odat  <- cmat[1:(nrow(cmat) - lastp), ]
uout <- updog(ocounts = odat[, 1], osize = rowSums(odat), ploidy = 6,
p1counts = p1dat[, 1], p1size = rowSums(p1dat),
p2counts = p2dat[, 1], p2size = rowSums(p2dat))
uout3 <- updog(ocounts = odat[, 1], osize = rowSums(odat), ploidy = 6,
do_mcmc = TRUE)
aprobs <- cmat[1:(nrow(cmat) - 12), 1]/ rowSums(cmat[1:(nrow(cmat) - 12),])
corder <- order(aprobs)
uout$p1postprob
uout$p2postprob
uout2$m_p1postprob
uout2$m_p2postprob
aprobs[corder[1:4]]
uout$opostprob[, corder[1:4]]
uout2$m_opostprob[, corder[1:4]]
labelvec <- apply(uout$opostprob, 2, which.max)
pl <- plot_geno(ocounts = odat[, 1], osize = rowSums(odat),
p1counts = p1dat[, 1], p1size = rowSums(p1dat),
p2counts = p2dat[, 1], p2size = rowSums(p2dat),
ploidy = 6,
col = labelvec)
labelvec <- apply(uout2$m_opostprob, 2, which.max)
pl <- plot_geno(ocounts = odat[, 1], osize = rowSums(odat),
p1counts = p1dat[, 1], p1size = rowSums(p1dat),
p2counts = p2dat[, 1], p2size = rowSums(p2dat),
ploidy = 6,
col = labelvec)
labelvec <- apply(uout3$m_opostprob, 2, which.max)
pl <- plot_geno(ocounts = odat[, 1], osize = rowSums(odat),
p1counts = p1dat[, 1], p1size = rowSums(p1dat),
p2counts = p2dat[, 1], p2size = rowSums(p2dat),
ploidy = 6,
col = labelvec)
cbind(uout3$m_p1postprob,
uout2$m_p1postprob,
round(uout$p1postprob, digits = 2))
cbind(uout3$m_p2postprob,
uout2$m_p2postprob,
round(uout$p2postprob, digits = 2))
set.seed(192)
getmc <- updog(ocounts = odat[, 1], osize = rowSums(odat), ploidy = 6,
do_mcmc = TRUE)
set.seed(193)
getmc <- updog(ocounts = odat[, 1], osize = rowSums(odat), ploidy = 6,
do_mcmc = TRUE)
getmc$m_p1postprob
set.seed(192)
getmc1 <- updog(ocounts = odat[, 1], osize = rowSums(odat), ploidy = 6,
do_mcmc = TRUE)
getmc1 <- updog(ocounts = odat[, 1], osize = rowSums(odat), ploidy = 6,
do_mcmc = TRUE)
set.seed(193)
getmc2 <- updog(ocounts = odat[, 1], osize = rowSums(odat), ploidy = 6,
do_mcmc = TRUE)
getmc$m_p1postprob
getmc$m_p1postprob
getmc$m_p2postprob
getmc1$m_p1postprob
getmc2$m_p1postprob
getmc1$m_p2postprob
getmc2$m_p2postprob
cbind(getmc1$m_p1postprob, getmc2$m_p1postprob)
cbind(getmc1$m_p2postprob, getmc2$m_p2postprob)
getmc1$m_opostprob
plot(getmc1$m_opostprob, getmc2$m_opostprob)
set.seed(195)
getmc1 <- updog(ocounts = odat[, 1], osize = rowSums(odat), ploidy = 6,
do_mcmc = TRUE)
getmc1 <- updog(ocounts = odat[, 1], osize = rowSums(odat), ploidy = 6,
do_mcmc = TRUE)
set.seed(196)
getmc2 <- updog(ocounts = odat[, 1], osize = rowSums(odat), ploidy = 6,
do_mcmc = TRUE)
getmc1 <- updog(ocounts = odat[, 1], osize = rowSums(odat), ploidy = 6,
do_mcmc = TRUE)
set.seed(196)
getmc2 <- updog(ocounts = odat[, 1], osize = rowSums(odat), ploidy = 6,
do_mcmc = TRUE)
cbind(getmc1$m_p1postprob, getmc2$m_p1postprob)
cbind(getmc1$m_p2postprob, getmc2$m_p2postprob)
plot(getmc1$m_opostprob, getmc2$m_opostprob)
rmarkdown::render("index.Rmd")
q()
n
