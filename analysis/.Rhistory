library(succotashr)
source("../code/datamaker_gerard.R")
args_val <- list()
args_val$tissue <- "Lung"
args_val$path <- "../data/"
args_val$Ngene <- 1000
## Nonnull case
args_val$poisthin <- TRUE
args_val$log2foldmean <- 0
args_val$skip_gene <- 5
args_val$Nsamp <- 10
args_val$log2foldsd <- 1
d_out <- datamaker(args_val)
num_sv <- d_out$meta$dfargs$num.sv
num_sv
num_sv <- d_out$meta$dfargs$num.sv
Y <- d_out$input$counts
X <- d_out$input$condition
X
X <- model.matrix(~d_out$input$condition)
X
Ycounts <- d_out$input$counts
X <- model.matrix(~d_out$input$condition)
Y <- t(log(as.matrix(Ycounts) + 1))
dim(Y)
dim(X)
source("chunk-options.R")
library(succotashr)
source("../code/datamaker_gerard.R")
set.seed(24254)
args_val <- list()
args_val$tissue <- "Lung"
args_val$path <- "../data/"
args_val$Ngene <- 1000
## Nonnull case
args_val$poisthin <- TRUE
args_val$log2foldmean <- 0
args_val$skip_gene <- 5
args_val$Nsamp <- 10
args_val$log2foldsd <- 1
d_out <- datamaker(args_val)
num_sv <- d_out$meta$dfargs$num.sv
Ycounts <- d_out$input$counts
Y <- t(log(as.matrix(Ycounts) + 1))
X <- model.matrix(~d_out$input$condition)
?succotashr
?succotash
suc_out <- succotash(Y = Y, X = X, k = num_sv, fa_method = "pca", lambda0 = 1) ## no regularization
suc_out_unif <- succotash(Y = Y, X = X, k = num_sv, fa_method = "pca", lambda0 = 1,
mix_type = "uniform") ## no regularization
suc_out$tau_seq
plot(suc_out$tau_seq, suc_out$pi_vals, type = 'h')
set.seed(24254)
args_val <- list()
args_val$tissue <- "Lung"
args_val$path <- "../data/"
args_val$Ngene <- 1000
## Nonnull case
args_val$poisthin <- TRUE
args_val$log2foldmean <- 0
args_val$skip_gene <- 5
args_val$Nsamp <- 10
args_val$log2foldsd <- 1
args_val$nullpi <- 0.5 ## true pi_0
d_out <- datamaker(args_val)
```
num_sv <- d_out$meta$dfargs$num.sv
Ycounts <- d_out$input$counts
Y <- t(log(as.matrix(Ycounts) + 1)) ## log(counts + 1)
X <- model.matrix(~d_out$input$condition)
suc_out <- succotash(Y = Y, X = X, k = num_sv, fa_method = "pca", lambda0 = 1) ## no regularization
suc_out_unif <- succotash(Y = Y, X = X, k = num_sv, fa_method = "pca", lambda0 = 1,
mix_type = "uniform") ## no regularization
suc_out_unif <- succotash(Y = Y, X = X, k = num_sv, fa_method = "pca", lambda0 = 1,
mix_type = "uniform") ## no regularization
plot(suc_out$tau_seq, suc_out$pi_vals, type = 'h')
suc_out <- succotash(Y = Y, X = X, k = num_sv, fa_method = "pca", lambda0 = 1, num_em_runs = 3) ## no regularization
plot(suc_out$tau_seq, suc_out$pi_vals, type = 'h')
suc_out10 <- succotash(Y = Y, X = X, k = num_sv, fa_method = "pca", lambda0 = 10, num_em_runs = 3) ## no regularization
suc_out100 <- succotash(Y = Y, X = X, k = num_sv, fa_method = "pca", lambda0 = 100, num_em_runs = 3) ## no regularization
suc_out200 <- succotash(Y = Y, X = X, k = num_sv, fa_method = "pca", lambda0 = 200, num_em_runs = 3) ## no regularization
plot(suc_out10$tau_seq, suc_out10$pi_vals, type = 'h')
plot(suc_out100$tau_seq, suc_out100$pi_vals, type = 'h')
plot(suc_out200$tau_seq, suc_out200$pi_vals, type = 'h')
plot(suc_out$tau_seq, suc_out$pi_vals, type = 'h')
plot(suc_out$tau_seq, suc_out$pi_vals, type = 'h', ylim = c(0,1))
abline(h = 0.5, col = 2, lwd = 2, lty = 2)
args_val$nullpi <- 0.9 ## true pi_0
d_out <- datamaker(args_val)
num_sv <- d_out$meta$dfargs$num.sv
Ycounts <- d_out$input$counts
Y <- t(log(as.matrix(Ycounts) + 1)) ## log(counts + 1)
X <- model.matrix(~d_out$input$condition)
suc_out <- succotash(Y = Y, X = X, k = num_sv, fa_method = "pca", lambda0 = 1, num_em_runs = 3) ## no regularization
suc_out10 <- succotash(Y = Y, X = X, k = num_sv, fa_method = "pca", lambda0 = 10, num_em_runs = 3) ## no regularization
suc_out100 <- succotash(Y = Y, X = X, k = num_sv, fa_method = "pca", lambda0 = 100, num_em_runs = 3) ## no regularization
suc_out200 <- succotash(Y = Y, X = X, k = num_sv, fa_method = "pca", lambda0 = 200, num_em_runs = 3) ## no regularization
plot(suc_out$tau_seq, suc_out$pi_vals, type = 'h', ylim = c(0,1))
abline(h = 0.5, col = 2, lwd = 2, lty = 2)
abline(h = args_val$nullpi, col = 2, lwd = 2, lty = 2)
plot(suc_out$tau_seq, suc_out$pi_vals, type = 'h', ylim = c(0,1))
abline(h = args_val$nullpi, col = 2, lwd = 2, lty = 2)
plot(suc_out10$tau_seq, suc_out10$pi_vals, type = 'h')
plot(suc_out10$tau_seq, suc_out10$pi_vals, type = 'h', ylim = c(0,1))
plot(suc_out100$tau_seq, suc_out100$pi_vals, type = 'h', ylim = c(0,1))
plot(suc_out200$tau_seq, suc_out200$pi_vals, type = 'h', ylim = c(0,1))
plot(suc_out$tau_seq, suc_out$pi_vals, type = 'h', ylim = c(0,1))
plot(suc_out$tau_seq, suc_out$pi_vals, type = 'h', ylim = c(0,1), xlab = expression(tau^2), ylab = expression(hat(pi)[0]))
plot(suc_out$tau_seq, suc_out$pi_vals, type = 'h', ylim = c(0,1), xlab = expression(tau^2), ylab = expression(hat(pi)[0]))
abline(h = args_val$nullpi, col = 2, lwd = 2, lty = 2)
plot(suc_out10$tau_seq, suc_out10$pi_vals, type = 'h', ylim = c(0,1), xlab = expression(tau^2), ylab = expression(hat(pi)[0]))
abline(h = args_val$nullpi, col = 2, lwd = 2, lty = 2)
plot(suc_out100$tau_seq, suc_out100$pi_vals, type = 'h', ylim = c(0,1), xlab = expression(tau^2), ylab = expression(hat(pi)[0]))
abline(h = args_val$nullpi, col = 2, lwd = 2, lty = 2)
plot(suc_out200$tau_seq, suc_out200$pi_vals, type = 'h', ylim = c(0,1), xlab = expression(tau^2), ylab = expression(hat(pi)[0]))
abline(h = args_val$nullpi, col = 2, lwd = 2, lty = 2)
plot(suc_out$tau_seq, suc_out$pi_vals, type = 'h', ylim = c(0,1), xlab = expression(tau^2),
ylab = expression(hat(pi)[0]), main = "Lambda = 1")
abline(h = args_val$nullpi, col = 2, lwd = 2, lty = 2)
plot(suc_out10$tau_seq, suc_out10$pi_vals, type = 'h', ylim = c(0,1), xlab = expression(tau^2),
ylab = expression(hat(pi)[0]), main = "Lambda = 10")
abline(h = args_val$nullpi, col = 2, lwd = 2, lty = 2)
plot(suc_out100$tau_seq, suc_out100$pi_vals, type = 'h', ylim = c(0,1), xlab = expression(tau^2),
ylab = expression(hat(pi)[0]), main = "Lambda = 100")
abline(h = args_val$nullpi, col = 2, lwd = 2, lty = 2)
plot(suc_out200$tau_seq, suc_out200$pi_vals, type = 'h', ylim = c(0,1), xlab = expression(tau^2),
ylab = expression(hat(pi)[0]), main = "Lambda = 200")
abline(h = args_val$nullpi, col = 2, lwd = 2, lty = 2)
legend("right", "True pi_0", col = 2, lwd = 2, lty = 2)
par(mfrow = c(2, 2))
plot(suc_out$tau_seq, suc_out$pi_vals, type = 'h', ylim = c(0,1), xlab = expression(tau^2),
ylab = expression(hat(pi)[0]), main = "Lambda = 1")
abline(h = args_val$nullpi, col = 2, lwd = 2, lty = 2)
legend("right", "True pi_0", col = 2, lwd = 2, lty = 2)
plot(suc_out10$tau_seq, suc_out10$pi_vals, type = 'h', ylim = c(0,1), xlab = expression(tau^2),
ylab = expression(hat(pi)[0]), main = "Lambda = 10")
abline(h = args_val$nullpi, col = 2, lwd = 2, lty = 2)
legend("right", "True pi_0", col = 2, lwd = 2, lty = 2)
plot(suc_out100$tau_seq, suc_out100$pi_vals, type = 'h', ylim = c(0,1), xlab = expression(tau^2),
ylab = expression(hat(pi)[0]), main = "Lambda = 100")
abline(h = args_val$nullpi, col = 2, lwd = 2, lty = 2)
legend("right", "True pi_0", col = 2, lwd = 2, lty = 2)
plot(suc_out200$tau_seq, suc_out200$pi_vals, type = 'h', ylim = c(0,1), xlab = expression(tau^2),
ylab = expression(hat(pi)[0]), main = "Lambda = 200")
abline(h = args_val$nullpi, col = 2, lwd = 2, lty = 2)
legend("right", "True pi_0", col = 2, lwd = 2, lty = 2)
succotash_given_alpha()
succotash_given_alpha
succotash_em
length(suc_out$pi_vals)
?succotash
?succotash_given_alpha
?succotash
?succotash_em
?succotash_given_alpha
names(suc_out)
succotash
names(suc_out)
?succotash_given_alpha
suc_out_zero <- succotash_given_alpha(Y = suc_out$Y1_scaled, alpha = suc_out$alpha_scaled,
sig_diag = suc_out$sig_diag_scaled, num_em_runs = 10,
tau_seq = c(0, 1), em_pi_init = c(0.9, 0.1))
suc_out_zero
names(suc_out_zero)
suc_out_zero$pi_vals
suc_out_zero <- succotash_given_alpha(Y = suc_out$Y1_scaled, alpha = suc_out$alpha_scaled,
sig_diag = suc_out$sig_diag_scaled, num_em_runs = 10,
tau_seq = c(0, 1), em_pi_init = c(0.1, 0.9))
suc_out_zero$pi_vals
succotash_given_alpha(Y = Y1_scaled, alpha = alpha_scaled,
sig_diag = sig_diag_scaled, num_em_runs = num_em_runs,
em_z_start_sd = z_start_sd, lambda_type = lambda_type,
lambda0 = lambda0)
suc_out$alpha_scaled
class(suc_out$alpha_scaled)
dim(suc_out$alpha_scaled)
pi_init <- runif(1)
pi_init
pi_init <- runif(1)
suc_out_zero <- succotash_given_alpha(Y = suc_out$Y1_scaled, alpha = suc_out$alpha_scaled,
sig_diag = suc_out$sig_diag_scaled, num_em_runs = 10,
tau_seq = c(0, 1), em_pi_init = c(pi_init, 1 - pi_init))
print(suc_out_zero$pi_vals)
for(index in 1:10) {
pi_init <- runif(1)
suc_out_zero <- succotash_given_alpha(Y = suc_out$Y1_scaled, alpha = suc_out$alpha_scaled,
sig_diag = suc_out$sig_diag_scaled, num_em_runs = 10,
tau_seq = c(0, 1), em_pi_init = c(pi_init, 1 - pi_init))
cat("Iteration =", index,"\n")
cat("Pi0 =", suc_out_zero$pi_vals,"\n\n")
}
cat("Iteration =", index,"\n")
cat("  Pi0_hat =", suc_out_zero$pi_vals,"\n\n")
for(index in 1:10) {
pi_init <- runif(1)
suc_out_zero <- succotash_given_alpha(Y = suc_out$Y1_scaled, alpha = suc_out$alpha_scaled,
sig_diag = suc_out$sig_diag_scaled, num_em_runs = 10,
tau_seq = c(0, 1), em_pi_init = c(pi_init, 1 - pi_init))
cat("Iteration =", index,"\n")
cat("  Pi0_hat =", suc_out_zero$pi_vals,"\n\n")
}
for(index in 1:10) {
pi_init <- runif(1)
suc_out_zero <- succotash_given_alpha(Y = suc_out$Y1_scaled, alpha = suc_out$alpha_scaled,
sig_diag = suc_out$sig_diag_scaled, num_em_runs = 10,
tau_seq = c(0, 1), em_pi_init = c(pi_init, 1 - pi_init))
cat("Repetition =", index,"\n")
cat("   Pi0_hat =", suc_out_zero$pi_vals,"\n\n")
}
suc_out_zero$Z
succotash()
succotash
library(succotashr)
source("../code/datamaker_onlydata.R")
set.seed(105340)
args_val <- list()
args_val$tissue <- "Lung"
args_val$path <- "../data/"
args_val$Ngene <- 1000
## Nonnull case
args_val$poisthin <- TRUE
args_val$log2foldmean <- 0
args_val$skip_gene <- 5
args_val$Nsamp <- 10
args_val$log2foldsd <- 1
args_val$nullpi <- 0.9 ## true pi_0
d_out <- datamaker(args_val)
d_out <- datamaker_counts_only(args_val)
num_sv <- d_out$meta$dfargs$num.sv
num_sv
Ycounts <- d_out$input$counts
Ycounts
dim(Y_counts)
dim(Ycounts)
Y <- t(log(as.matrix(Ycounts) + 1)) ## log(counts + 1)
X <- model.matrix(~d_out$input$condition)
?sva::num.sv
sva::num.sv(dat = Y, mod = X)
num_sv <- sva::num.sv(dat = t(Y), mod = X)
num_sv
pi_init <- runif(1)
suc_out_zero <- succotashr::succotash(Y = Y, X = X, k = num_sv, fa_method = "pca",
tau_seq = c(0, args_val$log2foldsd), em_pi_init = c(pi_init, 1 - pi_init))
suc_out$pi_vals
suc_out <- succotashr::succotash(Y = Y, X = X, k = num_sv, fa_method = "pca",
tau_seq = c(0, args_val$log2foldsd), em_pi_init = c(pi_init, 1 - pi_init))
suc_out$pi_vals
suc_out$lfdr
which_null <- d_out$meta$null
which_null
?pROC::roc
pROC::roc(response = which_null, predictor = suc_out$lfdr)
pROC::roc(response = which_null, predictor = suc_out$lfdr)$auc
suc_out <- succotashr::succotash(Y = Y, X = X, k = num_sv, fa_method = "pca", lambda0 = 1,
tau_seq = c(0, args_val$log2foldsd), em_pi_init = c(pi_init, 1 - pi_init))
pROC::roc(response = which_null, predictor = suc_out$lfdr)$auc
suc_out$pi_vals
suc_out <- succotashr::succotash(Y = Y, X = X, k = num_sv, fa_method = "pca", lambda0 = 1,
tau_seq = c(0, args_val$log2foldsd), em_pi_init = c(pi_init, 1 - pi_init))
pROC::roc(response = which_null, predictor = suc_out$lfdr)$auc
suc_out$pi_vals
pi0_mat <- matrix(NA, nrow = itermax, ncol = length(Nsamp_seq) * length(nullpi_seq) *
length(log2foldsd_seq))
itermax <- 100
pi0_mat <- matrix(NA, nrow = itermax, ncol = length(Nsamp_seq) * length(nullpi_seq) *
length(log2foldsd_seq))
Nsamp_seq <- c(5, 10, 20)
log2foldsd_seq <- c(1, 5)
nullpi_seq <- c(0.5, 0.9)
itermax <- 100
pi0_mat <- matrix(NA, nrow = itermax, ncol = length(Nsamp_seq) * length(nullpi_seq) *
length(log2foldsd_seq))
auc_mat <- matrix(NA, nrow = itermax, ncol = length(Nsamp_seq) * length(nullpi_seq) *
length(log2foldsd_seq))
colnames(pi0_mat) <-
apply(expand.grid(log2foldsd_seq, nullpi_seq*10, Nsamp_seq),
1, paste, collapse = "_")
colnames(auc_mat) <- apply(expand.grid(log2foldsd_seq, nullpi_seq*10, Nsamp_seq),
1, paste, collapse = "_")
col_index <- 0
itermax <- 100
pi0_mat <- matrix(NA, nrow = itermax, ncol = length(Nsamp_seq) * length(nullpi_seq) *
length(log2foldsd_seq))
auc_mat <- matrix(NA, nrow = itermax, ncol = length(Nsamp_seq) * length(nullpi_seq) *
length(log2foldsd_seq))
colnames(pi0_mat) <-
apply(expand.grid(log2foldsd_seq, nullpi_seq*10, Nsamp_seq),
1, paste, collapse = "_")
colnames(auc_mat) <- apply(expand.grid(log2foldsd_seq, nullpi_seq*10, Nsamp_seq),
1, paste, collapse = "_")
col_index <- 0
for(Nsamp_index in 1:length(Nsamp_seq)) {
args_val$Nsamp <- Nsamp_seq[Nsamp_index]
for(nullpi_index in 1:length(nullpi_seq)) {
args_val$nullpi <- nullpi_seq[nullpi_index]
for(log2foldsd_index in 1:length(log2foldsd_seq)) {
args_val$log2foldsd <- log2foldsd_seq[log2foldsd_index]
col_index <- col_index + 1
for(iter_index in 1:itermax) {
d_out <- datamaker_counts_only(args_val)
Ycounts <- d_out$input$counts
Y <- t(log(as.matrix(Ycounts) + 1)) ## log(counts + 1)
X <- model.matrix(~d_out$input$condition)
num_sv <- sva::num.sv(dat = t(Y), mod = X)
which_null <- d_out$meta$null
pi_init <- runif(1)
suc_out <- succotashr::succotash(Y = Y, X = X, k = num_sv, fa_method = "pca", lambda0 = 1,
tau_seq = c(0, args_val$log2foldsd), em_pi_init = c(pi_init, 1 - pi_init))
auc_out <- pROC::roc(response = which_null, predictor = suc_out$lfdr)$auc
pi0_out <- suc_out$pi_vals
auc_mat[iter_index, col_index] <- auc_out
pi0_mat[iter_index, col_index] <- pi0_out
cat("Repetition =", index,"\n")
cat("   Pi0_hat =", mean(pi0_mat[, col_index], na.rm = TRUE),"\n\n")
}
}
}
}
pi0_out <- suc_out$pi_vals[1]
auc_mat[iter_index, col_index] <- auc_out
pi0_mat[iter_index, col_index] <- pi0_out
pi0_mat
cat("Repetition =", index,"\n")
cat("   Pi0_hat =", mean(pi0_mat[, col_index], na.rm = TRUE),"\n\n")
col_index <- 0
for(Nsamp_index in 1:length(Nsamp_seq)) {
args_val$Nsamp <- Nsamp_seq[Nsamp_index]
for(nullpi_index in 1:length(nullpi_seq)) {
args_val$nullpi <- nullpi_seq[nullpi_index]
for(log2foldsd_index in 1:length(log2foldsd_seq)) {
args_val$log2foldsd <- log2foldsd_seq[log2foldsd_index]
col_index <- col_index + 1
for(iter_index in 1:itermax) {
d_out <- datamaker_counts_only(args_val)
Ycounts <- d_out$input$counts
Y <- t(log(as.matrix(Ycounts) + 1)) ## log(counts + 1)
X <- model.matrix(~d_out$input$condition)
num_sv <- sva::num.sv(dat = t(Y), mod = X)
which_null <- d_out$meta$null
pi_init <- runif(1)
suc_out <- succotashr::succotash(Y = Y, X = X, k = num_sv, fa_method = "pca", lambda0 = 1,
tau_seq = c(0, args_val$log2foldsd), em_pi_init = c(pi_init, 1 - pi_init))
auc_out <- pROC::roc(response = which_null, predictor = suc_out$lfdr)$auc
pi0_out <- suc_out$pi_vals[1]
auc_mat[iter_index, col_index] <- auc_out
pi0_mat[iter_index, col_index] <- pi0_out
cat("Iter =", iter_index,"\n")
cat("   Pi0_hat =", mean(pi0_mat[, col_index], na.rm = TRUE),"\n\n")
}
}
}
}
write.csv(pi0_mat, "../output/pi0_true_grid.csv", row.names = FALSE)
write.csv(auc_mat, "../output/auc_true_grid.csv", row.names = FALSE)
read.csv("../output/pi0_true_grid.csv")
read.csv("../output/auc_true_grid.csv")
pi0_mat <- read.csv("../output/pi0_true_grid.csv")
auc_mat <- read.csv("../output/auc_true_grid.csv")
pi0_mat
auc_mat
boxplot(pi0_mat)
boxplot(auc_mat)
boxplot(pi0_mat)
abline(h = 0.5)
abline(h = 0.9)
boxplot(auc_mat)
data_path <- "~/Data/big_sims_cate_out/"
pi0_name <- paste0(data_path, "pi0_nsamp", Nsamp,"_nullpi",
nullpi * 100,
"_log2foldsd", log2foldsd, ".csv")
Nsamp_index <- 1
nullpi_index <-
1
log2foldsd_index <- 1
Nsamp <- Nsamp_seq[Nsamp_index]
nullpi <- nullpi_seq[nullpi_index]
col_index <- col_index + 1
log2foldsd <- log2foldsd_seq[log2foldsd_index]
pi0_name <- paste0(data_path, "pi0_nsamp", Nsamp,"_nullpi",
nullpi * 100,
"_log2foldsd", log2foldsd, ".csv")
auc_name <- paste0(data_path, "auc_nsamp", Nsamp,"_nullpi",
nullpi * 100,
"_log2foldsd", log2foldsd, ".csv")
pi0_mat_cate <- read.csv(file = pi0_name)[, -c(1:3, 7:9)]
auc_mat_cate <- read.csv(file = auc_name)[, -c(1:3, 7:9)]
pi0_final <- cbind(pi0_mat_cate, pi0_mat[, col_index])
boxplot(pi0_final)
abline(h = 0.5)
abline(h = 0.9)
auc_final <- cbind(auc_mat_cate, auc_mat[, col_index])
boxplot(auc_mat)
boxplot(auc_final)
boxplot(auc_mat)
col_index
col_index <- 0
col_index <- col_index + 1
log2foldsd <- log2foldsd_seq[log2foldsd_index]
pi0_name <- paste0(data_path, "pi0_nsamp", Nsamp,"_nullpi",
nullpi * 100,
"_log2foldsd", log2foldsd, ".csv")
auc_name <- paste0(data_path, "auc_nsamp", Nsamp,"_nullpi",
nullpi * 100,
"_log2foldsd", log2foldsd, ".csv")
pi0_mat_cate <- read.csv(file = pi0_name)[, -c(1:3, 7:9)]
auc_mat_cate <- read.csv(file = auc_name)[, -c(1:3, 7:9)]
pi0_final <- cbind(pi0_mat_cate, pi0_mat[, col_index])
auc_final <- cbind(auc_mat_cate, auc_mat[, col_index])
boxplot(pi0_final)
abline(h = 0.5)
abline(h = 0.9)
boxplot(auc_final)
boxplot(auc_mat)
boxplot(auc_final)
qplot(pi0_final)
library(ggplot2)
library(ggplot2, reshape2)
qplot(melt(pi0_final, id.vars = NULL), geom = "boxplot")
library(reshape2)
qplot(melt(pi0_final, id.vars = NULL), geom = "boxplot")
?melt
qplot(melt(pi0_final), geom = "boxplot")
?qplot
melt(pi0_final)
names(melt(pi0_final))
qplot(y = value, x = variable, data = melt(pi0_final), geom = "boxplot")
qplot(y = value, x = variable, data = melt(pi0_final, id.vars = NULL), geom = "boxplot")
p <- qplot(y = value, x = variable, data = melt(pi0_final, id.vars = NULL), geom = "boxplot")
p <- qplot(y = value, x = variable, data = melt(pi0_final, id.vars = NULL), geom = "boxplot", fill = I("skyblue"),
xlab = "Method", ylab = expression(hat(pi)[0]),
main = paste0("Est of pi0 when n = ", Nsamp * 2,", pi0 = ", nullpi,
", log2foldsd = ", log2foldsd))
p
p + theme(axis.text.x = element_text(angle = 90, hjust = 1, vjust = 0.3))
geom_hline(yintercept = nullpi, color = "red", lty = 2, lwd = 1)
p + theme(axis.text.x = element_text(angle = 90, hjust = 1, vjust = 0.3)) +
geom_hline(yintercept = nullpi, color = "red", lty = 2, lwd = 1)
pi0_dat <- melt(pi0_final, id.vars = NULL)
p <- qplot(y = value, x = variable, data = pi0_dat, geom = "boxplot", fill = I("skyblue"),
xlab = "Method", ylab = expression(hat(pi)[0]),
main = paste0("Est of pi0 when n = ", Nsamp * 2,", pi0 = ", nullpi,
", log2foldsd = ", log2foldsd))
p + theme(axis.text.x = element_text(angle = 90, hjust = 1, vjust = 0.3)) +
geom_hline(yintercept = nullpi, color = "red", lty = 2, lwd = 1)
auc_dat <- melt(auc_final, id.vars = NULL)
auc_plot <- qplot(x = variable, y = value, data = auc_dat, geom = "boxplot",
fill = I("skyblue"), xlab = "Method", ylab = "AUC",
main = paste0("AUC when n = ", Nsamp * 2,", pi0 = ", nullpi,
", log2foldsd = ", log2foldsd)) +
geom_hline(yintercept = max(apply(auc_mat, 2, median, na.rm = TRUE)),
color = "red", lty = 2, lwd = 1) +
theme(axis.text.x = element_text(angle = 90, hjust = 1, vjust = 0.3))
pi0_plot <- p + theme(axis.text.x = element_text(angle = 90, hjust = 1, vjust = 0.3)) +
geom_hline(yintercept = nullpi, color = "red", lty = 2, lwd = 1)
auc_dat <- melt(auc_final, id.vars = NULL)
auc_plot <- qplot(x = variable, y = value, data = auc_dat, geom = "boxplot",
fill = I("skyblue"), xlab = "Method", ylab = "AUC",
main = paste0("AUC when n = ", Nsamp * 2,", pi0 = ", nullpi,
", log2foldsd = ", log2foldsd)) +
geom_hline(yintercept = max(apply(auc_mat, 2, median, na.rm = TRUE)),
color = "red", lty = 2, lwd = 1) +
theme(axis.text.x = element_text(angle = 90, hjust = 1, vjust = 0.3))
print(pi0_plot)
print(auc_plot)
auc_plot <- qplot(x = variable, y = value, data = auc_dat, geom = "boxplot",
fill = I("skyblue"), xlab = "Method", ylab = "AUC",
main = paste0("AUC when n = ", Nsamp * 2,", pi0 = ", nullpi,
", log2foldsd = ", log2foldsd)) +
geom_hline(yintercept = max(apply(auc_final, 2, median, na.rm = TRUE)),
color = "red", lty = 2, lwd = 1) +
theme(axis.text.x = element_text(angle = 90, hjust = 1, vjust = 0.3))
print(pi0_plot)
print(auc_plot)
pi0_mat <- read.csv("../output/pi0_true_grid.csv")
## read in CATE results to compare
data_path <- "~/Data/big_sims_cate_out/"
col_index <- 0
for(Nsamp_index in 1:length(Nsamp_seq)) {
Nsamp <- Nsamp_seq[Nsamp_index]
for(nullpi_index in 1:length(nullpi_seq)) {
nullpi <- nullpi_seq[nullpi_index]
for(log2foldsd_index in 1:length(log2foldsd_seq)) {
col_index <- col_index + 1
log2foldsd <- log2foldsd_seq[log2foldsd_index]
pi0_name <- paste0(data_path, "pi0_nsamp", Nsamp,"_nullpi",
nullpi * 100,
"_log2foldsd", log2foldsd, ".csv")
pi0_mat_cate <- read.csv(file = pi0_name)[, -c(1:3, 7:9)]
pi0_final <- cbind(pi0_mat_cate, pi0_mat[, col_index])
pi0_dat <- melt(pi0_final, id.vars = NULL)
p <- qplot(y = value, x = variable, data = pi0_dat, geom = "boxplot", fill = I("skyblue"),
xlab = "Method", ylab = expression(hat(pi)[0]),
main = paste0("Est of pi0 when n = ", Nsamp * 2,", pi0 = ", nullpi,
", log2foldsd = ", log2foldsd))
pi0_plot <- p + theme(axis.text.x = element_text(angle = 90, hjust = 1, vjust = 0.3)) +
geom_hline(yintercept = nullpi, color = "red", lty = 2, lwd = 1)
print(auc_plot)
}
}
}
